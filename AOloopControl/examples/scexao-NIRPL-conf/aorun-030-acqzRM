#!/usr/bin/env bash

# This script uses milk-argparse
# See template milk-scriptexample in module milk_module_example for template and instructions

# script 1-line description
MSdescr="AO loop execution script"



source cacaovars.*.bash

# Extended description
MSdescr="AO loop script

CACAO_LOOPNAME = ${CACAO_LOOPNAME}
"


# standard configuration
# location ./scripts/
source milk-script-std-config

# prerequisites
#

RequiredCommands=( tmux milk )

fpsCTRLtmuxname="${CACAO_LOOPNAME}_fpsCTRL"
fpsCTRLfifo="${MILK_SHM_DIR}/${fpsCTRLtmuxname}.fifo"
RequiredPipes=( ${fpsCTRLfifo} )

RequiredDirs=()





# SCRIPT MANDATORY ARGUMENTS
# syntax: "name:type(s)/test(s):description"
#



# SCRIPT OPTIONS
# syntax: "short:long:functioncall:args[types]:description"
#

# parse arguments
source milk-argparse



function sendFPScmd {
    echo "SENDING: $1"
    echo "$1" >> ${fpsCTRLfifo}
}




# ======================================================================
# acquWFS
# ======================================================================
sendFPScmd "setval acqlin_zRM-${CACAO_LOOPNUMBER}.AOloopindex ${CACAO_LOOPNUMBER}"

sendFPScmd "setval acqlin_zRM-${CACAO_LOOPNUMBER}.normalize ON"
sendFPScmd "setval acqlin_zRM-${CACAO_LOOPNUMBER}.LOmaxCPA 2.0"

sendFPScmd "setval acqlin_zRM-${CACAO_LOOPNUMBER}.WFSmask.RMc0 0.0"
sendFPScmd "setval acqlin_zRM-${CACAO_LOOPNUMBER}.WFSmask.RMc1 0.0"

sendFPScmd "setval acqlin_zRM-${CACAO_LOOPNUMBER}.timing.NBexcl 1"


sendFPScmd "confwupdate acqlin_zRM-${CACAO_LOOPNUMBER}"
sendFPScmd "runstart acqlin_zRM-${CACAO_LOOPNUMBER}"



exit

# ======================================================================
# Starting DM hardware delay simulator
# ======================================================================

sendFPScmd "confwupdate streamDelay-${CACAO_DMINDEX}"
sendFPScmd "runstart streamDelay-${CACAO_DMINDEX}"


# ======================================================================
# Starting MVM simulator
# ======================================================================

sendFPScmd "confwupdate simmvmgpu-${CACAO_LOOPNUMBER}"
sendFPScmd "runstart simmvmgpu-${CACAO_LOOPNUMBER}"


# WAIT for aolX_linsimWFS to appear
filename="${MILK_SHM_DIR}/aol${CACAO_LOOPNUMBER}_linsimWFS.im.shm"
echo "Waiting for file ${filename} ..."
until [ -f "$filename" ]
do
     sleep 0.1
done

# ======================================================================
# Starting WFC camera simulator
# ======================================================================

sendFPScmd "confwupdate wfscamsim-${CACAO_LOOPNUMBER}"
sendFPScmd "runstart wfscamsim-${CACAO_LOOPNUMBER}"





exit




# ======================================================================
# Starting DM combination process
# ======================================================================

stepFile="step.aorunscript.DMCH2DISP"
if [ ! -f "$stepFile" ]; then
	echo ""
	echo "Starting DM channels to displacement process"
    echo ""
    # Start DM comb
    taskset_DMch2disp="3"
    sendFPScmd "setval DMch2disp-${CACAO_DMINDEX}.procinfo.taskset ${taskset_DMch2disp}"
    sendFPScmd "runstart DMch2disp-${CACAO_DMINDEX}"

    touch ${stepFile}
    exit
else
    echo "found ${stepFile} -> skipping"
fi




# ======================================================================
# Acquire WFS image from camera
#
# This step loads execution queue #2, which is kept on hold for
# later execution
#
# Example shows how to change execution queue and set its priority
# Note that priority 0 means "on hold"
# For all priority values > 0, the task with the highest priority
# is run first
#
# ======================================================================

stepFile="step.aorunscript.ACQWFS"
if [ ! -f "$stepFile" ]; then
	echo ""
	echo "Pre-fill queue 2 with WFS acquisition"
	echo ""
    # Fill up execution queue 2
    # set queue to #2
    sendFPScmd "setqindex 2"
    # put execution queue on hold (priority = 0)
    sendFPScmd "setqprio 0"
    sendFPScmd "confwupdate acquWFS-${CACAO_LOOPNUMBER}"
    sendFPScmd "runstart acquWFS-${CACAO_LOOPNUMBER}"
    # Return to execution queue 0
    sendFPScmd "setqindex 0"
    # run tasks with priority = 1 (highest priority first)
    sendFPScmd "setqprio 1"

    touch ${stepFile}
    exit
else
    echo "found ${stepFile} -> skipping"
fi







# ======================================================================
# Starting streamdelay process
# ======================================================================

stepFile="step.aorunscript.STREMDELAY"
if [ ! -f "$stepFile" ]; then

	echo ""
	echo "Start STREAMDELAY"
	echo ""
    sendFPScmd "confwupdate streamDelay-${CACAO_DMINDEX}"
    sendFPScmd "runstart streamDelay-${CACAO_DMINDEX}"

    touch ${stepFile}
    exit
else
    echo "found ${stepFile} -> skipping"
fi




# ======================================================================
# Starting simulation MVM GPU process
# ======================================================================

stepFile="step.aorunscript.SIMMVMGPU"
if [ ! -f "$stepFile" ]; then

	echo ""
	echo "Sart simulation MVM on GPU"
	echo ""
	# set loop at 100 Hz
	sendFPScmd "setval simmvmgpu-${CACAO_LOOPNUMBER}.procinfo.triggerdelay 0.01"
    sendFPScmd "confwupdate simmvmgpu-${CACAO_LOOPNUMBER}"
    sendFPScmd "runstart simmvmgpu-${CACAO_LOOPNUMBER}"

    touch ${stepFile}
    exit
else
    echo "found ${stepFile} -> skipping"
fi




# ======================================================================
# Start WFS acquisition and measure latency
# ======================================================================

stepFile="step.aorunscript.MLAT"
if [ ! -f "$stepFile" ]; then

	echo ""
	echo "Start WFS acquisition and measure latency"
	echo ""
    # launch queue 2
    sendFPScmd "queueprio 2 1"

    sendFPScmd "confwupdate mlat-${CACAO_LOOPNUMBER}"


    # wait until RUN process complete to proceed to next task
    # marks start of sequential operation
    sendFPScmd "waitonrunON"

    sendFPScmd "runstart mlat-${CACAO_LOOPNUMBER}"

    touch ${stepFile}
    exit
else
    echo "found ${stepFile} -> skipping"
fi





# ======================================================================
# Measure zonal response matrix
# ======================================================================

stepFile="step.aorunscript.ZRM"
if [ ! -f "$stepFile" ]; then

	echo ""
	echo "Acquire zonal response matrix"
	echo ""
    # take zonal response matrix
    sendFPScmd "setval acqWFSlincal_z-${CACAO_LOOPNUMBER}.timing.upmlat ON"
    sendFPScmd "confwupdate acqWFSlincal_z-${CACAO_LOOPNUMBER}"
    sendFPScmd "runstart acqWFSlincal_z-${CACAO_LOOPNUMBER}"

    touch ${stepFile}
    exit
else
    echo "found ${stepFile} -> skipping"
fi




# ======================================================================
# Measure low order response matrix
# ======================================================================

stepFile="step.aorunscript.LORM"
if [ ! -f "$stepFile" ]; then

    # take low-order modal RM
    sendFPScmd "confwupdate acqlin_loRM-${CACAO_LOOPNUMBER}"
    sendFPScmd "runstart acqlin_loRM-${CACAO_LOOPNUMBER}"

    touch ${stepFile}
    exit
else
    echo "found ${stepFile} -> skipping"
fi




# ======================================================================
# Compute control matrix
# ======================================================================

stepFile="step.aorunscript.CM"
if [ ! -f "$stepFile" ]; then

    # compute straight CM
    sendFPScmd "setval compsCM-2.SVDlim 0.01"
    sendFPScmd "confwupdate compsCM-${CACAO_LOOPNUMBER}"
    sendFPScmd "runstart compsCM-${CACAO_LOOPNUMBER}"

    touch ${stepFile}
    exit
else
    echo "found ${stepFile} -> skipping"
fi






# compute Fourier control matrix
#sendFPScmd "setval compfCM-${CACAO_LOOPNUMBER}.upAlign ON"
#sendFPScmd "setval compfCM-${CACAO_LOOPNUMBER}.upRMfiles ON"
#sendFPScmd "confwupdate compfCM-${CACAO_LOOPNUMBER}"
#sendFPScmd "runstart compfCM-${CACAO_LOOPNUMBER}"




# ======================================================================
# Close AO loop
# ======================================================================

stepFile="step.aorunscript.LOOPRUN"
if [ ! -f "$stepFile" ]; then

    sendFPScmd "waitonrunOFF"


    cd $CACAOWORKDIR/${LOOPNAME}dir
    pwd
    cacao << EOF
loadfits "fps.compsCM-${CACAO_LOOPNUMBER}.datadir/sCMat00.fits" im
cpsh im cmat
listim
exitCLI
EOF
    cd ../..

    sendFPScmd "setval loopRUN-${CACAO_LOOPNUMBER}.sn_cmat cmat"
    sendFPScmd "confwupdate loopRUN-${CACAO_LOOPNUMBER}"

    touch ${stepFile}
    exit
else
    echo "found ${stepFile} -> skipping"
fi
