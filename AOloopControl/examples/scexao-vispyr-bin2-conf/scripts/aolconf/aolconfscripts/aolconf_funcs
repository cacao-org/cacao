#!/bin/bash


if [ ! -v aolconfFLAG ]; then
echo "ERROR: This script should be called from aolconf main script"
exit
fi


function printWARNING ()
{
tput bold
tput setaf 5
echo "WARNING: $@"
tput sgr0
aoconflog "WARNING: $@"
}

function printERROR ()
{
tput bold
tput setaf 1
echo "ERROR: $@"
tput sgr0
aoconflog "ERROR: $@"
}




##########################################
# log queued process
##########################################
function logRunningProcessQ0
{
	datestr=`date -u +%Y-%m-%d_%H:%M:%S`
	string=$( printf "%s   %20s   %20s   %s" "${datestr}" "$1" "$2" "$3" )
	echo "$string" > runproc/$1.runprocQ
}



##########################################
# Log process as queued in a tmux session
# sends command to tmux session, write corresponding .runprocQ file
# when tmux session gets to launch process, .runprocQ file becomes .runproc
##########################################
# arg1 : process name
# arg2 : tmux session name
#
function logRunningProcessQ
{
	datestr=`date -u +%Y-%m-%d_%H:%M:%S`
	string=$( printf "%s   %20s   %20s   %s" "${datestr}" "$1" "$2" "$3" )
	echo "$string" > runproc/$1.runprocQ
	tmux send-keys -t $2 "mv runproc/$1.runprocQ runproc/$1.runproc" C-m
}


##########################################
# log process
##########################################
function logRunningProcess 
{
	datestr=`date -u +%Y-%m-%d_%H:%M:%S`
	string=$( printf "%s   %20s   %20s   %s" "${datestr}" "$1" "$2" "$3" )
	echo "$string" > runproc/$1.runproc 
}







##########################################
# READ PARAMETER FROM ./conf/
##########################################
# arg 1: parameter name
# arg 2: default value
# 
# param value is stored in variable "paramvalue"
function ConfReadParam {
file="./conf/param_$1.txt"
if [ -f "$file" ]; then
paramvalue=$( head -1 $file )
else # write default value
paramvalue="$2"
echo "$2" > $file
echo "# default value set by function ConfReadParam on $( date -u )" >> $file
fi
}
# Example:
# ConfReadParam mvar "0"; mvar="$paramvalue"


##############################################
# FUNCTION: READ STATUS FROM FILE
##############################################
# arg 1: status name
# arg 2: default value
# 
# param value is stored in variable "statusvalue"
function StatReadStat {
mkdir -p status
file="./status/stat_$1.txt"
if [ -f "$file" ]; then
statusvalue=$( head -1 $file )
else
statusvalue="$2"
echo "$2" > $file
fi
}
# Example:
# StatReadStat mvar "0"; mvarstat="$statusvalue"


##############################################
# FUNCTION: READ INSTRUMENT CONF VAL FROM FILE
##############################################
# arg 1: parameter name
# arg 2: default value
# 
# param value is stored in variable "instconfvalue"
function ConfReadInstConf {
file="./conf/instconf_$1.txt"
if [ -f "$file" ]; then
instconfvalue=$( head -1 $file )
else
instconfvalue="$2"
echo "$2" > $file
fi
}
# Example:
# ConfReadInstConf mvar "0"; mvar="$instconfvalue"








function stringcenter {
line=$1
    let " col1 = $nbwcols-35"
    columns="$col1"
    string=$(printf "%*s%*s\n" $(( (${#line} + columns) / 2)) "$line" $(( (columns - ${#line}) / 2)) " ")
}



function getshmimsize {
	
if [ -f "./loadedSM/$1.kept" ] && [ -f "./loadedSM/$1.imsize" ]; then  # don't re-measure size if unchanged
cp ./loadedSM/$1.imsize conf/conf_imsize_$1.txt
else
$execname << EOF
readshmimsize $1 _size.txt
quit
EOF
sizestring=$( head -1 _size.txt )
sizestring=$(printf "%+12s\n" "$sizestring" )
echo "$sizestring" > conf/conf_imsize_$1.txt
echo "$sizestring" > loadedSM/$1.imsize
rm -f _size.txt
fi
}



function makemenuitemstringaolshm {
name="$1"
textfield=$( printf " %-20s" "$2" )
tf1=$( printf " %+17s" "aol${LOOPNUMBER}_${name}")
fname=$( head -1 ./conf/shmim.${name}.name.txt )
if [ -f "$fname" ] && [ -f "./conf/shmim.${name}.name.txt" ]; then
sizestring=$( head -1 conf/shmim.${name}.imsize.txt )
OKstr="\Z2\Zr$sizestring\Zn"
menustring="[${OKstr}] $textfield          \Z4\Zb$tf1\Zn <- \Zu${fname}\Zn"
else
OKstr="\Z1   MISSING  \Zn"
menustring="[${OKstr}] $textfield          \Z4\Zb$tf1\Zn <- \Zu\Z1${fname}\Zn"
fi
}






function SelectValue01 {
vali=$( echo $value| awk '{printf("%03d",1000.0*$1)}' )
menuitems1=( "000" "0.000" )
i="1"
while [ $i -lt "$1" ]
do
str0=$( echo $i|awk '{printf("%03d",$1)}')
str1=$( echo $i|awk '{printf("%5.3f", $1*0.001)}')
i=$[$i+$i]
menuitems1+=( "$str0" "$str1" )
done

for i in `seq $1 $3 $2 `;
        do
if [[ "$i" -lt "$2" && "$i" -gt "001" ]]; then
str0=$( echo $i|awk '{printf("%03d",$1)}')
str1=$( echo $i|awk '{printf("%5.3f", $1*0.001)}')
menuitems1+=( "$str0" "$str1" )
fi
done 

cmd=( dialog --default-item "${vali}" --menu "Choose one:" 50 80 100 "${menuitems1[@]}" )
value1=$("${cmd[@]}" 2>&1 >/dev/tty)
value=$( echo $value1 | awk '{printf("%5.3f", $1*0.001)}' )
echo $value
}



function SelectValue02 {
vali=$( echo $value| awk '{printf("%05d",100000.0*$1)}' )
menuitems1=( "00000" "0.00000" )
i="1"
while [ $i -lt "$1" ]
do
str0=$( echo $i|awk '{printf("%05d",$1)}')
str1=$( echo $i|awk '{printf("%7.5f", $1*0.00001)}')
i=$[$i+$i]
menuitems1+=( "$str0" "$str1" )
done

for i in `seq $1 $3 $2 `;
        do
if [[ "$i" -lt "$2" && "$i" -gt "00001" ]]; then
str0=$( echo $i|awk '{printf("%05d",$1)}')
str1=$( echo $i|awk '{printf("%7.5f", $1*0.00001)}')
menuitems1+=( "$str0" "$str1" )
fi
done 

cmd=( dialog --default-item "${vali}" --menu "Choose one:" 50 80 100 "${menuitems1[@]}" )
value1=$("${cmd[@]}" 2>&1 >/dev/tty)
value=$( echo $value1 | awk '{printf("%7.5f", $1*0.00001)}' )
echo $value
}



function SelectValue03 {
vali=$( echo $value| awk '{printf("%03d",1000.0*$1)}' )
menuitems1=( "000" "1.000" )
i="1"
while [ $i -lt "$1" ]
do
str0=$( echo $i|awk '{printf("%03d",$1)}')
str1=$( echo $i|awk '{printf("%5.3f", 1.0-$1*0.001)}')
i=$[$i+$i]
menuitems1+=( "$str0" "$str1" )
done

for i in `seq $1 $3 $2 `;
        do
if [[ "$i" -lt "$2" && "$i" -gt "001" ]]; then
str0=$( echo $i|awk '{printf("%03d",$1)}')
str1=$( echo $i|awk '{printf("%5.3f", 1.0-$1*0.001)}')
menuitems1+=( "$str0" "$str1" )
fi
done 

cmd=( dialog --default-item "${vali}" --menu "Choose one:" 50 80 100 "${menuitems1[@]}" )
value1=$("${cmd[@]}" 2>&1 >/dev/tty)
value=$( echo $value1 | awk '{printf("%5.3f", 1.0-$1*0.001)}' )
echo $value
}



