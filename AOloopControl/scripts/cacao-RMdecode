#! /bin/bash

NBARGS=1
pname=`echo "$0" | sed "s/\.\///g"`







function printHELP {
    echo "------------------------------------------------------------------------"
    echo "$(tput bold) $pname : Decode zonal resp matrix $(tput sgr0)"
    echo "------------------------------------------------------------------------"
    echo "Cleans zonal response matrices in ./tmpRMacqu/ directory"
    echo "if images conf/RMpixindex.fits conf/RMmat.fits exist, use them for coding/decoding"
    echo "   "
    echo " $(tput bold)USAGE:$(tput sgr0)"
    echo "     $0 [-h] <FPSname>"
    echo ""
    echo " $(tput bold)OPTIONS:$(tput sgr0)"
    echo "     $(tput bold)-h$(tput sgr0)          help"
    echo ""
    echo " $(tput bold)INPUT:$(tput sgr0)"
    echo "     <FPSname>      Function Parameter Structure (FPS) name"
    echo ""
    echo " $(tput bold)OUTPUT:$(tput sgr0)"
    echo "  zrespmat.fits    : zonal response matrix"
    echo "  wfsref0.fits     : wfs reference"
    echo "  wfsmap.fits      : WFS response map"
    echo "  dmmap.fits       : DM response map"
    echo "     wfsmask.fits"
    echo "     dmmaskRM.fits"
    echo "     dmslaved.fits"
    echo "     dmmask.fits"
    echo ""
    echo "------------------------------------------------------------------------"
}



printHELP1 ()
{
    printf "     $(tput bold)%-25s$(tput sgr0)       Cleans zonal resp matrix\n" "$0"
}




EXITSTATUS=0


function checkFile {
    if [ -f $1 ]; then
        echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] File $(tput bold)$1$(tput sgr0) found"
    else
        echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] File $(tput bold)$1$(tput sgr0) not found"
        EXITSTATUS=1
    fi
}

function checkDir {
    if [ -d $1 ]; then
        echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] Directory $(tput bold)$1$(tput sgr0) found"
    else
        echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] Directory $(tput bold)$1$(tput sgr0) not found"
        EXITSTATUS=1
    fi
}




# Transform long options to short ones
singlelinehelp=0
for arg in "$@"; do
    shift
    case "$arg" in
        "--help") set -- "$@" "-h" ;;
        "--help1")
            set -- "$@" "-h"
            singlelinehelp=1;
            ;;
        *)        set -- "$@" "$arg"
    esac
done





while getopts :h FLAG; do
    case $FLAG in
        h)  #show help
            if [ "$singlelinehelp" -eq "0" ]; then
                printHELP
            else
                printHELP1
            fi
            exit
            ;;
        \?) #unrecognized option - show help
            echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
            printHELP
            ;;
    esac
done

shift $((OPTIND-1))






if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
    if [ "$#" -ne $NBARGS ]; then
        echo "$(tput setaf 1)$(tput bold) Illegal number of parameters ($NBARGS params required, $# entered) $(tput sgr0)"
    fi
    printHELP
    exit
fi




# ======================= CHECK REQUIRED FILES =================================


# READ PARAMETERS FROM FPS
checkFile $1

if [ ${EXITSTATUS} -eq 1 ]; then
    echo "$(tput setaf 1)$(tput bold) -> EXITING $(tput sgr0)"
    exit ${EXITSTATUS}
else
    echo ""
fi








#loopnb=$( head -1 LOOPNUMBER )

loopnb=${CACAO_LOOPNUMBER}

FPSfilename=$1
FPSname="$(basename ${FPSfilename} .fps)"



# Read parameters from FPS file
# note that ^ ensures grep matches beginning of line, and trailing space ensures exact match
#
echo "grep "^${FPSname}.conf.datadir " ${FPSfilename} |  awk '{print $3;}'"
datadir=$( grep "^${FPSname}.conf.datadir " ${FPSfilename} |  awk '{print $3;}' )
HpokeMode=$( grep "^${FPSname}.Hpoke " ${FPSfilename} |  awk '{print $3;}' )
FPStimestring=$( grep "^${FPSname}.conf.timestring " ${FPSfilename} |  awk '{print $3;}' )

echo "FPSname       : ${FPSname}"
echo "datadir       : ${datadir}"
echo "HpokeMode     : ${HpokeMode}"
echo "FPStimestring : ${FPStimestring}"

checkDir ${datadir}

if [ ${EXITSTATUS} -eq 1 ]; then
    echo "$(tput setaf 1)$(tput bold) -> EXITING $(tput sgr0)"
    exit ${EXITSTATUS}
fi





if [ ${HpokeMode} = "ON" ]; then
    echo "Using Hadamard encoding"
    fileRMmat="${datadir}/Hmat.fits"
    fileRMpixindex="${datadir}/Hpixindex.fits"
else
    echo "Using straight encoding"
    fileRMmat="${datadir}/RMmat.fits"
    fileRMpixindex="${datadir}/RMpixindex.fits"
fi


pname0=$0
pname="aol${loopnb}zrespM"



fileRMpokeCube="${datadir}/RMpokeCube.fits"
filerespM="./${datadir}/respM.fits"
filewfsref="./${datadir}/wfsref.fits"


checkFile ${fileRMpokeCube}
checkFile ${fileRMmat}
checkFile ${fileRMpixindex}
checkFile ${filerespM}
checkFile ${filewfsref}



OMP_NUM_THREADS=6 cacao -n $pname << EOF
cacao.aolnb $loopnb
loadfits "${fileRMpokeCube}" RMpokeC
loadfits "${fileRMmat}" RMmat
loadfits "${fileRMpixindex}" pixindexim
loadfits "${filerespM}" respm
loadfits "${filewfsref}" wfsref0

cacaocc.aolproczrm respm wfsref0 zrespm wfsmap dmmap

saveFITS zrespm "./${datadir}/zrespM.fits"
saveFITS wfsmap "./${datadir}/wfsmap.fits"
saveFITS dmmap "./${datadir}/dmmap.fits"
listim
exitCLI
EOF


# register output files to be logged

# time at which files are written
timestring=$( date -u +%Y%m%dT%H%M%S.%6N )

echo "${FPStimestring} ${timestring} zrespM fits" > ${datadir}/zrespM.outlog
echo "${FPStimestring} ${timestring} wfsmap fits" > ${datadir}/wfsmap.outlog
echo "${FPStimestring} ${timestring} dmmap fits" > ${datadir}/dmmap.outlog




exit

# Process time sampled slices

AVEFILECOUNTER=0
while [  $AVEFILECOUNTER -lt 100 ]; do
    cntnum=$( echo ${AVEFILECOUNTER} | awk '{printf("%03d", $1)}')
    zrespM_filename="./${stageddir}/respM.ave${cntnum}.fits"
    wfsref_filename="./${stageddir}/wfsref.ave${cntnum}.fits"

    if [ -f "$zrespM_filename" ]; then


        OMP_NUM_THREADS=6 cacao -n $pname << EOF
cacao.aolnb $loopnb
loadfits "./${stageddir}/RMpokeCube.fits" RMpokeC
loadfits "./${stageddir}/RMmat.fits" RMmat
loadfits "./${stageddir}/RMpixindex.fits" pixindexim
loadfits "${zrespM_filename}" zrespmat0
loadfits "${wfsref_filename}" wfsref00

cacaocc.aolproczrm zrespmat0 wfsref00 zrespmat wfsmap dmmap

saveFITS zrespmat "./${stageddir}/zrespM.ave${cntnum}.fits"
listim
exitCLI
EOF

    fi

    let AVEFILECOUNTER=AVEFILECOUNTER+1
done
