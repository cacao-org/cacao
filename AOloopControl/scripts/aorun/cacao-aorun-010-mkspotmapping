#!/usr/bin/env bash

# This script uses milk-argparse
# See template milk-scriptexample in module milk_module_example for template and instructions

# script 1-line description
MSdescr="Make spots mapping"



source cacaovars.*.bash

# Extended description
MSextdescr="Make spots mapping

CACAO_LOOPNAME = ${CACAO_LOOPNAME}
"

source milk-script-std-config
source cacao-check-cacaovars


RequiredCommands=( tmux milk )

fpsCTRLtmuxname="${CACAO_LOOPNAME}_fpsCTRL"
fpsCTRLfifo="${MILK_SHM_DIR}/${fpsCTRLtmuxname}.fifo"
RequiredPipes=( ${fpsCTRLfifo} )

RequiredDirs=()


# parse arguments
source milk-argparse






echo "input frame = ${CACAO_WFSSTREAM}"

milk << EOF
readshmim ${CACAO_WFSSTREAM}
streamave ..procinfo 1
streamave ..triggersname ${CACAO_WFSSTREAM}
streamave ..triggermode 3
streamave ..loopcntMax 1000
streamave ${CACAO_WFSSTREAM} ${CACAO_WFSSTREAM}_ave 1000
loadfits "${CACAO_WFSSTREAM}_dark.fits" imdark
imflux=${CACAO_WFSSTREAM}_ave-imdark
saveFITS imflux "${CACAO_WFSSTREAM}_wfsref.fits"
listim
exitCLI
EOF




cacao << EOF
loadfits "${CACAO_WFSSTREAM}_wfsref.fits" im
cacaoio.findspots im 4 20 19 mapc
saveFITS spotscan "spotscan.fits"
saveFITS mapc "${CACAO_WFSSTREAM}_mapc.fits"
listim
exitCLI
EOF

milk-FITS2shm ${CACAO_WFSSTREAM}_mapc.fits ${CACAO_WFSSTREAM}_mapc

sendFPScmd "setval mapWFS-${CACAO_LOOPNUMBER}.wfsin ${CACAO_WFSSTREAM}"
sendFPScmd "setval mapWFS-${CACAO_LOOPNUMBER}.map ${CACAO_WFSSTREAM}_mapc"

sendFPScmd "setval mapWFS-${CACAO_LOOPNUMBER}.procinfo.triggersname ${CACAO_WFSSTREAM}"

rm -f $MILK_SHM_DIR/aol${CACAO_LOOPNUMBER}_wfsim.im.shm
sendFPScmd "setval mapWFS-${CACAO_LOOPNUMBER}.wfsout aol${CACAO_LOOPNUMBER}_wfsim"

