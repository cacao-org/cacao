#!/usr/bin/env bash

# This script uses milk-argparse
# See template milk-scriptexample in module milk_module_example for template and instructions


MSdescr="make synthetic DM modes for RM"

MSextdescr="Assemble a Zernike + Fourier DM modes"

source milk-script-std-config
source cacao-check-cacaovars


# SCRIPT OPTIONS
# syntax: "short:long:functioncall:args[types]:description"

MSopt+=( "c:CPAmax:setCPAmax:cpamax[float]:Set maximum cycles per aperture (CPA) [8]" )
CPAmax="8"
function setCPAmax()
{
	CPAmax=$1
}


MSopt+=( "c:CPAmax:setCPAmax:cpamax[float]:Set maximum cycles per aperture (CPA) [8]" )
CPAmax="8"
function setCPAmax()
{
	CPAmax=$1
}

MSopt+=( "z:NBzer:setNBzer:NBzer[int]:Set number of Zernike polynomials [5]" )
NBzer=5
function setNBzer()
{
	NBzer=$1
}


MSopt+=( "a:alpha:setalpha:alpha[float]:Set power law index [0.5]" )
alpha="0.5"
function setalpha()
{
	alpha=$1
}




source milk-argparse



echo "DM size  : $CACAO_DMxsize x $CACAO_DMysize"


DMMODEDIR="conf/RMmodesDM"
mkdir -p ${DMMODEDIR}



x0default=$(echo "scale=3; $CACAO_DMxsize/2" | bc)
y0default=$(echo "scale=3; $CACAO_DMysize/2" | bc)
r0default=$(echo "scale=3; 0.450*$CACAO_DMxsize" | bc)


SAMPLING1Dmode=128

# 2D defaults
DMsizex=${CACAO_DMxsize}
DMsizey=${CACAO_DMysize}
DMx0=${CACAO_DM_beam_xcent:-$x0default}
DMy0=${CACAO_DM_beam_ycent:-$y0default}
DMr0=${CACAO_DM_beam_rad:-$r0default}

# if DM is 1D
#
if [ $CACAO_DMysize -eq 1 ]; then
echo "Deformable mirror is 1D"
echo "Using sampling size $SAMPLING1Dmode"
DMsizex=${SAMPLING1Dmode}
DMsizey=${SAMPLING1Dmode}
DMx0=$(( $DMsizex / 2 ))
DMy0=$(( $DMsizey / 2 ))
DMr0=$(( $DMsizex / 2 ))

# create DM mask
milk-all << EOF
imgen.mkdisk dmmask2D ${DMsizex} ${DMsizey} ${DMx0} ${DMy0} ${DMr0}
saveFITS dmmask2D "conf/dmmask2D.fits"
exitCLI
EOF


fi



echo "using DMx0 = ${DMx0}"
echo "using DMy0 = ${DMy0}"
echo "using DMr0 = ${DMr0}"







# Zernike modes
# Fourier modes

deltaCPA="0.8"

radmaskfact="1.1"


# Create synthetic DM modes
#

milk-all << EOF
mload cacaocomputeCalib
zern.mkzerc .TTfactor 8.0
zern.mkzerc .radmaskfact ${radmaskfact}
zern.mkzerc zerc ${DMsizex} ${DMsizey} ${DMx0} ${DMy0} ${DMr0} ${NBzer}
zercm=zerc*3
lintools.mkFouriermodes .fpowerlaw -${alpha}
lintools.mkFouriermodes .fpowerlaw_minf 1.0
lintools.mkFouriermodes .fpowerlaw_maxf 100.0
lintools.mkFouriermodes ?
lintools.mkFouriermodes Fmodes ${DMsizex} ${DMsizey} ${CPAmax} ${deltaCPA} ${DMr0} ${radmaskfact} 0
merge3d zerc Fmodes synRMmodesDM
saveFITS synRMmodesDM "conf/RMmodesDM/synRMmodesDM0.fits"
exitCLI
EOF

# mask-extrapolate

if [ $CACAO_DMysize -eq 1 ]; then
# 1D case
ln -sf $(pwd)/conf/dmmask2D.fits ./conf/dmmask-syn.fits
else
# 2D case
ln -sf $(pwd)/conf/dmmask.fits ./conf/dmmask-syn.fits
fi




milk-all << EOF
mload cacaocomputeCalib
radext=${DMr0}*${radmaskfact}
imgen.mkdisk dmmaskext ${DMsizex} ${DMsizey} ${DMx0} ${DMy0} radext
loadfits "conf/RMmodesDM/synRMmodesDM0.fits" synRMmodesDM
loadfits "conf/dmmask-syn.fits" dmmask
cacaocc.maskextrapolate synRMmodesDM dmmask dmmaskext synRMmodesDMm

#synRMmodesDMm=synRMmodesDM*dmmask
saveFITS synRMmodesDMm "conf/RMmodesDM/synRMmodesDM2D.fits"
listim
exitCLI
EOF


echo "OUTPUT : conf/RMmodesDM/synRMmodesDM.fits"


if [ $CACAO_DMysize -eq 1 ]; then
# Project 2D modes to 1D actuators

# link to 2D pos file
ln -sf $(pwd)/data/act2Dpos.txt mapcoord2D.txt
cacao << EOF
loadfits "conf/RMmodesDM/synRMmodesDM2D.fits" synRMmodesDM2D
cacaocc.sample2DWF synRMmodesDM2D map2D synRMmodesDM1D
listim
saveFITS synRMmodesDM1D "conf/RMmodesDM/synRMmodesDM1D.fits"
exitCLI
EOF

ln -sf $(pwd)/conf/RMmodesDM/synRMmodesDM1D.fits conf/RMmodesDM/synRMmodesDM.fits

else

ln -sf $(pwd)/conf/RMmodesDM/synRMmodesDM2D.fits conf/RMmodesDM/synRMmodesDM.fits

fi




# Compute WFS response of synthetic modes
#

cacao << EOF
loadfits "conf/RMmodesWFS/zrespM-H.fits" zrespM
loadfits "conf/RMmodesDM/synRMmodesDM.fits" dmC
cacaocc.generateRMWFS zrespM dmC wfsC
saveFITS wfsC "conf/RMmodesWFS/synRMmodesWFS.fits"
listim
exitCLI
EOF


rm -f ./conf/RMmodesDM/RMmodesDM.fits
ln -s $(pwd)/conf/RMmodesDM/synRMmodesDM.fits ./conf/RMmodesDM/RMmodesDM.fits
echo "ln -s $(pwd)/conf/RMmodesDM/synRMmodesDM.fits ./conf/RMmodesDM/RMmodesDM.fits"


rm -f ./conf/RMmodesWFS/RMmodesWFS.fits
ln -s $(pwd)/conf/RMmodesWFS/synRMmodesWFS.fits ./conf/RMmodesWFS/RMmodesWFS.fits
echo "ln -s $(pwd)/conf/RMmodesWFS/synRMmodesWFS.fits ./conf/RMmodesWFS/RMmodesWFS.fits"
