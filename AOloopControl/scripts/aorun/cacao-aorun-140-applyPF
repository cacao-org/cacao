#!/usr/bin/env bash

# This script uses milk-argparse
# See template milk-scriptexample in module milk_module_example for template and instructions

# script 1-line description
MSdescr="Apply predictive filter"

MSextdescr="Apply predictive filter

Arguments:
- mode block index
- start/stop
"
source milk-script-std-config
source cacao-check-cacaovars

MSarg+=( "block:integer:mode block index" )
MSarg+=( "action:string:action (start/stop/check)" )
source milk-argparse

MBLOCK="${inputMSargARRAY[0]}"


ACTION="${inputMSargARRAY[1]}"

BLKindex=$( printf %02d $MBLOCK )
fpsname="applyPF${BLKindex}"


ACTIONOK=0

if [ ${ACTION} == "check" ]; then
	ACTIONOK=1
fi

# Checking FPS
FPScheckOK="OK"
checkFPSON CACAO_FPSPROC_MODALFILTERING ${CACAO_FPSPROC_MODALFILTERING}
checkFPSON CACAO_FPSPROC_APPLYPF ${CACAO_FPSPROC_APPLYPF}

if [ ${FPScheckOK} == "FAIL" ]; then
	echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] FPS check failed"
	cacaomsglog "ERROR FPScheck"
	exit 1
fi




if [ ${ACTION} == "start" ]; then
	ACTIONOK=1
	cacaomsglog "START"
	sendFPScmd "setval ${fpsname}-${CACAO_LOOPNUMBER}.AOloopindex ${CACAO_LOOPNUMBER}"
	sendFPScmd "confwupdate ${fpsname}-${CACAO_LOOPNUMBER}"
	sendFPScmd "runstart ${fpsname}-${CACAO_LOOPNUMBER}"
fi


if [ ${ACTION} == "stop" ]; then
	ACTIONOK=1
	cacaomsglog "STOP"
	sendFPScmd "runstop ${fpsname}-${CACAO_LOOPNUMBER}"
fi




if [ ${ACTIONOK} == 0 ]; then
	echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] ACTION $ACTION undefined"
	cacaomsglog "ERROR ACTION undefined"
fi

cacaomsglog "END"
