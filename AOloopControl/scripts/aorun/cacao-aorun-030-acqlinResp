#!/usr/bin/env bash

# This script uses milk-argparse
# See template milk-scriptexample in module milk_module_example for template and instructions

# script 1-line description
MSdescr="cacao script: measure WFS response to DM modes"

MSextdescr="
Input DM modes in:
<rundir>/conf/DMmodes/<name>.fits

Output WFS response written as:
<rundir>/conf/WFSmodes/<name>.WFSresp.fits

"

source milk-script-std-config
source cacao-check-cacaovars

MSarg+=( "DMmodes:string:DM modes cube FITS file" )


WaitForCompletion=0
MSopt+=( "w:waitfcomp:set_WaitForCompletion::wait for process to complete to exist script" )
function set_WaitForCompletion() {
	WaitForCompletion=1
}


source milk-argparse

DMmodeCname="${inputMSargARRAY[0]}"
DMmCfname="conf/RMmodesDM/${DMmodeCname}.fits"


checkFile ${DMmCfname}



errexit=0

# Checking FPS
FPScheckOK="OK"
checkFPSON CACAO_FPSPROC_ACQUWFS ${CACAO_FPSPROC_ACQUWFS}
checkFPSON CACAO_FPSPROC_ACQLINZRM ${CACAO_FPSPROC_MEASURELINRESP}

if [ ${FPScheckOK} == "FAIL" ]; then
echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] FPS check failed"
errexit=1
fi


# Checking stream
streamcheckOK="OK"
checkstream aol${CACAO_LOOPNUMBER}_imWFS0
checkstream aol${CACAO_LOOPNUMBER}_imWFS1
checkstream aol${CACAO_LOOPNUMBER}_imWFS2

if [ ${streamcheckOK} == "FAIL" ]; then
echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] stream check failed"
errexit=1
fi


if [ $errexit = 1 ]; then
exit
fi


mkdir -p ./conf/RMmodesDM/
mkdir -p ./conf/RMmodesWFS/

sendFPScmd "setval measlinresp-${CACAO_LOOPNUMBER}.timing.WFSfrequ ${CACAO_WFSFRATE}"
sendFPScmd "setval measlinresp-${CACAO_LOOPNUMBER}.timing.hardwlatfr ${CACAO_LATENCYFR}"

sendFPScmd "setval measlinresp-${CACAO_LOOPNUMBER}.streamin aol${CACAO_LOOPNUMBER}_dmRM"
sendFPScmd "setval measlinresp-${CACAO_LOOPNUMBER}.streamout aol${CACAO_LOOPNUMBER}_imWFS2"

sendFPScmd "setval measlinresp-${CACAO_LOOPNUMBER}.inmodes ../conf/RMmodesDM/${DMmodeCname}.fits"
sendFPScmd "setval measlinresp-${CACAO_LOOPNUMBER}.outmodes ../conf/RMmodesWFS/${DMmodeCname}.WFSresp.fits"

sendFPScmd "setval measlinresp-${CACAO_LOOPNUMBER}.timing.autoTiming ON"


sendFPScmd "confwupdate measlinresp-${CACAO_LOOPNUMBER}"
sendFPScmd "runstart measlinresp-${CACAO_LOOPNUMBER}"


if [ $WaitForCompletion == "1" ]; then
echo "Waiting for completion ..."
pOK=1
while [ $pOK -gt 0 ]; do
	sleep 0.2
	pOK=$(ps -alx| grep measlinresp-${CACAO_LOOPNUMBER} | grep RUNSTART | wc -l)
done
fi
