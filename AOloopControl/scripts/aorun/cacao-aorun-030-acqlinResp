#!/usr/bin/env bash

# This script uses milk-argparse
# See template milk-scriptexample in module milk_module_example for template and instructions

# script 1-line description
MSdescr="Measure WFS response to DM modes"

MSextdescr="
Input DM modes in:
<rootdir>/conf/DMmodes/<name>.fits

Sources <looprundir>/fps.mlat-<loopnumber>.datadir/cacaovars.bash
to get CACAO_WFSFRATE and CACAO_LATENCYHARDWFR

Output WFS response written as:
<rootdir>/conf/WFSmodes/<name>.WFSresp.fits

"

source milk-script-std-config
source cacao-check-cacaovars

MSarg+=( "DMmodes:string:DM modes cube FITS file" )


NBloop=10
MSopt+=( "n:nbloop:set_NBloop:nbloop[long]:number of loops" )
function set_NBloop() {
	NBloop="$1"
}

saveALL=0
MSopt+=( "s:saveALL:set_saveALL::save all intermediate RMs" )
function set_saveALL() {
	saveALL=1
}


source milk-argparse

DMmodeCname="${inputMSargARRAY[0]}"
DMmCfname="conf/RMmodesDM/${DMmodeCname}.fits"


checkFile ${DMmCfname}



errexit=0

# Checking FPS
FPScheckOK="OK"
checkFPSON CACAO_FPSPROC_ACQUWFS ${CACAO_FPSPROC_ACQUWFS}
checkFPSON CACAO_FPSPROC_ACQLINZRM ${CACAO_FPSPROC_MEASURELINRESP}

if [ ${FPScheckOK} == "FAIL" ]; then
	echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] FPS check failed"
	cacaomsglog "ERROR FPScheck"
	errexit=1
	exit 1
fi


# Checking stream
streamcheckOK="OK"
checkstream aol${CACAO_LOOPNUMBER}_imWFS0
checkstream aol${CACAO_LOOPNUMBER}_imWFS1
checkstream aol${CACAO_LOOPNUMBER}_imWFS2

if [ ${streamcheckOK} == "FAIL" ]; then
	echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] stream check failed"
	cacaomsglog "ERROR streamcheck"
	errexit=1
	exit 1
fi


if [ $errexit = 1 ]; then
	exit 1
fi


mkdir -p ./conf/RMmodesDM/
mkdir -p ./conf/RMmodesWFS/

sendFPScmd "setval measlinresp-${CACAO_LOOPNUMBER}.procinfo.loopcntMax ${NBloop}"

sendFPScmd "setval measlinresp-${CACAO_LOOPNUMBER}.timing.WFSfrequ ${CACAO_WFSFRATE}"
sendFPScmd "setval measlinresp-${CACAO_LOOPNUMBER}.timing.hardwlatfr ${CACAO_LATENCYHARDWFR}"

sendFPScmd "setval measlinresp-${CACAO_LOOPNUMBER}.streamin aol${CACAO_LOOPNUMBER}_dmRM"
sendFPScmd "setval measlinresp-${CACAO_LOOPNUMBER}.streamout aol${CACAO_LOOPNUMBER}_imWFS2"

sendFPScmd "setval measlinresp-${CACAO_LOOPNUMBER}.inmodes ../conf/RMmodesDM/${DMmodeCname}.fits"
sendFPScmd "setval measlinresp-${CACAO_LOOPNUMBER}.outmodes ../conf/RMmodesWFS/${DMmodeCname}.WFSresp.fits"

if [ $saveALL = 1 ]; then
sendFPScmd "setval measlinresp-${CACAO_LOOPNUMBER}.saveALL ON"
else
sendFPScmd "setval measlinresp-${CACAO_LOOPNUMBER}.saveALL OFF"
fi

sendFPScmd "confwupdate measlinresp-${CACAO_LOOPNUMBER}"
sendFPScmd "runstart measlinresp-${CACAO_LOOPNUMBER}"
cacaomsglog "START"


rm -f ./conf/RMmodesDM/RMmodesDM.fits
ln -s $(pwd)/conf/RMmodesDM/${DMmodeCname}.fits ./conf/RMmodesDM/RMmodesDM.fits
cp $(pwd)/conf/RMmodesDM/${DMmodeCname}.fits ./conf/RMmeas_modesDM.fits


rm -f ./conf/RMmodesWFS/RMmodesWFS.fits


echo "Waiting for completion ..."
pOK=1
while [ $pOK -gt 0 ]; do
	sleep 0.2
	pOK=$(ps -alx| grep measlinresp-${CACAO_LOOPNUMBER} | grep RUNSTART | wc -l) || :
done
#fi

ln -s $(pwd)/conf/RMmodesWFS/${DMmodeCname}.WFSresp.fits ./conf/RMmodesWFS/RMmodesWFS.fits
cp $(pwd)/conf/RMmodesWFS/${DMmodeCname}.WFSresp.fits ./conf/RMmeas_modesWFS.fits


# LOGGING
# see cacaofuncs-log for conventions
#
source cacaofuncs-log
cacao-calib-logFITSfile RMmeas_modesDM
cacao-calib-logFITSfile RMmeas_modesWFS


cacaomsglog "END"
