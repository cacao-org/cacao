#!/usr/bin/env bash

# Examples:
# cacao-aorun-040-compfCM -g 0 -c 10 -sm 0.01 -se 0.01 -m 12 -ef 1.1 -eo 0.3 -t
# cacao-aorun-040-compfCM -g 0 -zrm "./nlcWFS/zrespM-H.fits" -wfsm "./nlcWFS/wfsmask.fits" -dmm "./nlcWFS/dmmask.fits" -cm "./nlcWFS/FpokesC.8.fits" -t


# This script uses milk-argparse
# See template milk-scriptexample in module milk_module_example for template and instructions

# temp directory for intermediate steps
cfCMtmpdir="compfCM"

# script 1-line description
MSdescr="Build control modes ordered according to spatial frequency"

DMmask="./conf/dmmask.fits"
WFSmask="./conf/wfsmask.fits"
zrespm="./conf/RMmodesWFS/zrespM-H.fits"

MSextdescr="Takes as input the zonal response matrix
Uses temporary directory ./${cfCMtmpdir}/

INPUT CONTROL MODES (Cmodes)
The output control modes will try to adhere to the Cmodes, using the same 
ordering.
By default Cmdoes are Zernike modes followed by Fourior modes.
User can specify a custom set of input control modes with -cm option.

DM EXTRAPOLATION
DM exttapolation set by extrfactor and extroffset.
Extrapolation extends beyond dmmask by extroffset pixel (fixed quantity for all 
modes) and extrfactor radian.(proportional to Fourier mode period). The second
extrapolation (radian) is tapered.

Input files read by script :
	$DMmask   (override with -dmm)
	$WFSmask  (override with -wfsm)
	$zrespm   (override with -zrm)
"

source milk-script-std-config
source cacao-check-cacaovars

RequiredCommands+=( fitsheader )


TESTMODE=0
MSopt+=( "t:testmode:setTESTMODE::permorms tests" )
function setTESTMODE()
{
	TESTMODE=1
}






MSopt+=( "zrm:zrespm:setzrespm:zrespm[string]:zonal response matrix [${zrespm}]" )
function setzrespm()
{
	zrespm=$1
}

MSopt+=( "wfsm:WFSmask:setWFSmask:WFSmask[string]:WFS mask [${WFSmask}]" )
function setWFSmask()
{
	WFSmask=$1
}

MSopt+=( "dmm:DMmask:setDMmask:DMmask[string]:DM mask [${DMmask}]" )
function setDMmask()
{
	DMmask=$1
}

# Control modes (input) to be used
# These are the target modes we will try to adhere to
#
Cmodes="NULL"
MSopt+=( "cm:Cmodes:setCmodes:Cmodes[string]:Control modes input, recreate if NULL [${Cmodes}]" )
function setCmodes()
{
	Cmodes=$1
}





extrfactor="1.0"
MSopt+=( "ef:extrfactor:setextfactor:extrfactor[float]:DM extrapolation factor [${extrfactor}]" )
function setextfactor()
{
	extrfactor=$1
}

extroffset="0.5"
MSopt+=( "eo:extroffset:setextoffset:extroffset[float]:DM extrapolation offset in pix [${extroffset}]" )
function setextoffset()
{
	extroffset=$1
}



GPUdevice="-1"
MSopt+=( "g:GPUdevice:setGPUdevice:GPUdevice[int]:Set GPU device, -1 for CPU [${GPUdevice}]" )
function setGPUdevice()
{
	GPUdevice=$1
}

CPAmax="8"
MSopt+=( "c:CPAmax:setCPAmax:cpamax[float]:max cycles per aperture (CPA)[${CPAmax}]" )
function setCPAmax()
{
	CPAmax=$1
}

maxemode=16
MSopt+=( "m:maxemode:setmaxemode:maxemode[int]:number of modes for DM extrapolation[${maxemode}]" )
function setmaxemode()
{
	maxemode=$1
}

NBzer=5
MSopt+=( "z:NBzer:setNBzer:NBzer[int]:Set number of Zernike polynomials [${NBzer}]" )
function setNBzer()
{
	NBzer=$1
}

SVDlim="0.1"
MSopt+=( "sm:SVDlim:setSVDlim:SVDlim[float]:Set SVD limit for pseudoinverse [${SVDlim}]" )
function setSVDlim()
{
	SVDlim=$1
}


SVDelim="0.1"
MSopt+=( "se:SVDelim:setSVDelim:SVDelim[float]:Set SVD extrapolation limit [${SVDelim}]" )
function setSVDelim()
{
	SVDelim=$1
}


source milk-argparse

# Re-order control modes in increasing spatial frequency by multidimentional rotation


# Input
#
# by convention:
# CMmodesWFS is orthogonal over wfsmask
# CMmodesDM is norm2 normalized over dmmask
#
#maxSVDmode=80
#CMmDM="conf/CMmodesDM/CMmodesDM.fits[*,*,1:${maxSVDmode}]"
#CMmWFS="conf/CMmodesWFS/CMmodesWFS.fits[*,*,1:${maxSVDmode}]"



echo "extrfactor = ${extrfactor}"
echo "extroffset = ${extroffset}"

mkdir -p ${cfCMtmpdir}



# Get DM size from DMmask

strcmd=$(fitsheader -k NAXIS1 $DMmask | tail -1)
arr=($strcmd)
DMsizex=${arr[2]}
echo "DMsizex = $DMsizex"

strcmd=$(fitsheader -k NAXIS2 $DMmask | tail -1)
arr=($strcmd)
DMsizex=${arr[2]}
echo "DMsizex = $DMsizex"












if [ "$Cmodes" = "NULL" ]; then

########################################################################
#
# CONSTRUCT TARGET MODES -> modesZFn
#
########################################################################

# Create set of Fourier modes, store as modesF.fits
#
#CACAO_DMxsize=12
#CACAO_DMysize=12
#CACAO_DM_beam_rad=5.5
x0default=$(echo "scale=3; $CACAO_DMxsize/2-0.5" | bc)
y0default=$(echo "scale=3; $CACAO_DMysize/2-0.5" | bc)
r0default=$(echo "scale=3; 0.450*$CACAO_DMxsize" | bc)


# 2D defaults
DMsizex=${CACAO_DMxsize}
DMsizey=${CACAO_DMysize}
DMx0=${CACAO_DM_beam_xcent:-$x0default}
DMy0=${CACAO_DM_beam_ycent:-$y0default}
#DMr0=${CACAO_DM_beam_rad:-$r0t}
DMr0=${CACAO_DM_beam_rad:-$r0default}


echo "DMx0 = $DMx0"
echo "DMy0 = $DMy0"
echo "DMr0 = $DMr0"



# Create DM-space modes ordered by spatial frequency
# First modes are Zernikes, then Fourier
# Modes are not orthogonal
#
# This is the target ordering which the new control modes should 
# match as well as possible
#
# output :
# modesZFn.fits  Modes
#

# amplification factor for TT
ZTTfactor="8.0"

# Fourier power law
# large value -> fast decrease of amplitude with spatial frequency
Falpha="1.0"

milk-all << EOF
zern.mkzerc .TTfactor ${ZTTfactor}
zern.mkzerc .radmaskfact 1.1
zern.mkzerc modesZ ${DMsizex} ${DMsizey} ${DMx0} ${DMy0} ${DMr0} ${NBzer}
saveFITS modesZ "./${cfCMtmpdir}/modesZ.fits"
lintools.mkFouriermodes .fpowerlaw -${Falpha}
lintools.mkFouriermodes .fpowerlaw_minf 1.0
lintools.mkFouriermodes .fpowerlaw_maxf 100.0
lintools.mkFouriermodes .align.centered 0
lintools.mkFouriermodes .align.xcenter ${DMx0}
lintools.mkFouriermodes .align.ycenter ${DMy0}
lintools.mkFouriermodes .rCPAmin 0.1
loadfits "${DMmask}" dmmask
lintools.mkFouriermodes .maskim dmmask
lintools.mkFouriermodes .extrfactor 1.5
lintools.mkFouriermodes .extroffset 0.0
lintools.mkFouriermodes modesF ${DMsizex} ${DMsizey} ${CPAmax} 0.8 ${DMr0} 1.2 0
saveFITS modesF "./${cfCMtmpdir}/modesF.fits"
immerge modesZ modesF modesZF 2
saveFITS modesZF "./${cfCMtmpdir}/modesZF.fits"
modesZFm=modesZF*dmmask
normalizeslice modesZF dmmask modesZFn 2
listim
saveFITS modesZFn "./${cfCMtmpdir}/modesZFn.fits"
exitCLI
EOF

else
pwd
cp ${Cmodes} "./${cfCMtmpdir}/modesZF.fits"

milk-all << EOF
loadfits "./${cfCMtmpdir}/modesZF.fits" modesZF
loadfits "${DMmask}" dmmask
modesZFm=modesZF*dmmask
listim
normalizeslice modesZF dmmask modesZFn 2
saveFITS modesZFn "./${cfCMtmpdir}/modesZFn.fits"
exitCLI
EOF

fi






########################################################################
#
# EXTRAPOLATION MODES
# 
# Used to extrapolate DM shape beyond active pixels
# A modal basis is constructed, along with its extended (beyond
# active DM pixels) version.
#
########################################################################

#
# Build modal decomposition for spatial extrapolation in DM space
#
# Perform PCA of modesZFn.fits by SVD
#
# INPUT:
#   modesZFn.fits
#
# OUTPUT:
#   emodesDM.fits
#   emodesDMe.fits
#


milk-all << EOF
loadfits "./${cfCMtmpdir}/modesZFn.fits[*,*,1:${maxemode}]" modesZFn
loadfits "${DMmask}" dmmask
modesZFnm=modesZFn*dmmask
linalg.compSVD .GPUdevice ${GPUdevice}
linalg.compSVD modesZFnm modesZFnmU modesZFnmS modesZFnmV ${SVDelim}
saveFITS modesZFnmU "./${cfCMtmpdir}/emodesDM.fits"
linalg.sgemm .GPUdevice ${GPUdevice}
linalg.sgemm .transpA 0
linalg.sgemm .transpB 0
linalg.sgemm modesZFn modesZFnmV out
saveFITS out "./${cfCMtmpdir}/emodesDMe.fits"
listim
exitCLI
EOF





if [ ${TESTMODE} = 1 ]; then
# OPTIONAL
# Check orthogonality in DM space
#
milk-all << EOF
linalg.sgemm .GPUdevice ${GPUdevice}
loadfits "./${cfCMtmpdir}/emodesDM.fits" emodesDM
linalg.sgemm .transpA 1
linalg.sgemm emodesDM emodesDM out
saveFITS out "./${cfCMtmpdir}/emodesDM_xp.fits"
exitCLI
EOF
fi



########################################################################
#
# MODAL RM
#
########################################################################



if [ ${TESTMODE} = 1 ]; then
# Compute WFS response to modesZFn over wfsmask -> modesZFnWFSm.fits
#
milk-all << EOF
linalg.sgemm .GPUdevice ${GPUdevice}
loadfits "${zrespm}" zrespM
loadfits "./${cfCMtmpdir}/modesZFn.fits" modesZFn
loadfits "${WFSmask}" wfsmask
listim
linalg.sgemm zrespM modesZFn modesZFnWFS
saveFITS modesZFnWFS "./${cfCMtmpdir}/modesZFnWFS.fits"
modesZFnWFSm=modesZFnWFS*wfsmask
saveFITS modesZFnWFSm "./${cfCMtmpdir}/modesZFnWFSm.fits"
exitCLI
EOF
fi




# Compute WFS response to modesZF over wfsmask -> modesZFWFSm.fits
#
# INPUT:
#   zrespm
#   modesZF.fits
#
# OUTPUT:
#   modesZFWFS.fits
#   modesZFWFSm.fits
#

milk-all <<EOF
linalg.sgemm .GPUdevice ${GPUdevice}
loadfits "${zrespm}" zrespM
loadfits "./${cfCMtmpdir}/modesZF.fits" modesZF
linalg.sgemm zrespM modesZF modesZFWFS
saveFITS modesZFWFS "./${cfCMtmpdir}/modesZFWFS.fits"
loadfits "${WFSmask}" wfsmask
modesZFWFSm=modesZFWFS*wfsmask
saveFITS modesZFWFSm "./${cfCMtmpdir}/modesZFWFSm.fits"
listim
exitCLI
EOF




########################################################################
#
# CONTROL MODES
#
########################################################################


if [ ${TESTMODE} = 1 ]; then
# COMPUTE CONTROL MODES FROM Z-RESPM
#

# Perform PCA of zespM.fits by SVD
#
# The output is ordered by singular value
# This is not a friendly ordering, spatial frequency is not preserved
# The first modes are NOT low-order mores :(
#
# OUTPUT:
# zCMmDM.fits
# zCMmWFS.fits
#


milk-all << EOF
loadfits "${zrespm}" zespM
loadfits "${WFSmask}" wfsmask
zespMm=zespM*wfsmask
linalg.compSVD .GPUdevice ${GPUdevice}
linalg.compSVD .Vdim0 ${DMsizex}
linalg.compSVD zespMm mFsvdU mFsvdS mFsvdV ${SVDlim}
saveFITS SVDunmodes "./${cfCMtmpdir}/zCMmWFS.fits"
loadfits "${DMmask}" dmmask
mFsvdVm=mFsvdV*dmmask
saveFITS mFsvdVm "./${cfCMtmpdir}/zCMmDM.fits"
listim
exitCLI
EOF
fi







# COMPUTE CONTROL MODES FROM RESPONSE TO ZF MODES (includes power law alpha)
#
# INPOUT:
#   modesZF.fits
#   modesZFWFSm.fits
# 
# OUTPUT:
#   CMmDM.fits
#   CMmWFS.fits
#
milk-all << EOF
loadfits "./${cfCMtmpdir}/modesZF.fits" RMDM
loadfits "./${cfCMtmpdir}/modesZFWFSm.fits" RMWFS
linalg.compSVD .GPUdevice ${GPUdevice}
linalg.compSVD RMWFS mFsvdU mFsvdS mFsvdV ${SVDlim}
saveFITS SVDunmodes "./${cfCMtmpdir}/CMmWFS.fits"
linalg.sgemm .GPUdevice ${GPUdevice}
linalg.sgemm .transpA 0
linalg.sgemm .transpB 0
linalg.sgemm RMDM mFsvdV outDM
#linalg.sgemm RMWFS mFsvdV outWFS
saveFITS outDM "./${cfCMtmpdir}/CMmDM.fits"
#saveFITS outWFS "./${cfCMtmpdir}/CMmDM_WFStest.fits"
listim
exitCLI
EOF



if [ ${TESTMODE} = 1 ]; then
# Reconstruct WFS from DM (TEST)

milk-all << EOF
linalg.sgemm .GPUdevice ${GPUdevice}
loadfits "./${cfCMtmpdir}/CMmDMn.fits" CMmDM
loadfits "${zrespm}" zespM
linalg.sgemm zespM CMmDM out
saveFITS out "./${cfCMtmpdir}/CMmDM_WFS.fits"
listim
exitCLI
EOF
fi





# Renormalize modes in WFS space
#
# Input: 
#   CMmDM   : control modes in DM space, unity RMS over dmmask
#   CMmWFS  : control modes in WFS space, orthogonal basis
# 
# Output:
#   CMmDMn  : control modes in DM space
#   CMmWFSn : control modes in WFS space, orthonormal basis over wfsmask
#
milk-all << EOF
loadfits "./${cfCMtmpdir}/CMmDM.fits" CMmDM
loadfits "./${cfCMtmpdir}/CMmWFS.fits" CMmWFS
loadfits "${WFSmask}" wfsmask
normalizeslice .auxin CMmDM
normalizeslice CMmWFS wfsmask CMmWFSn 2
CMmWFSnm=CMmWFSn*wfsmask
saveFITS CMmWFSnm "./${cfCMtmpdir}/CMmWFSn.fits"
saveFITS CMmDM "./${cfCMtmpdir}/CMmDMn.fits"
exitCLI
EOF



if [ ${TESTMODE} = 1 ]; then

# Check orthonormality in WFS space (input)
#
milk-all << EOF
linalg.sgemm .GPUdevice ${GPUdevice}
loadfits "${WFSmask}" wfsmask
loadfits "./${cfCMtmpdir}/CMmWFS.fits" CMmWFS
CMmWFSm=CMmWFS*wfsmask
linalg.sgemm .transpA 1
linalg.sgemm CMmWFSm CMmWFSm out
saveFITS out "./${cfCMtmpdir}/CMmWFS_mxp.fits"
exitCLI
EOF

# Check orthonormality in DM space (input)
#
milk-all << EOF
linalg.sgemm .GPUdevice ${GPUdevice}
loadfits "${DMmask}" dmmask
loadfits "./${cfCMtmpdir}/CMmDM.fits" CMmDM
CMmDMm=CMmDM*dmmask
linalg.sgemm .transpA 1
linalg.sgemm CMmDMm CMmDMm out
saveFITS out "./${cfCMtmpdir}/CMmDM_mxp.fits"
exitCLI
EOF


# Check orthonormality in WFS space (output)
#
milk-all << EOF
linalg.sgemm .GPUdevice ${GPUdevice}
loadfits "${WFSmask}" wfsmask
loadfits "./${cfCMtmpdir}/CMmWFSn.fits" CMmWFSn
CMmWFSnm=CMmWFSn*wfsmask
linalg.sgemm .transpA 1
linalg.sgemm CMmWFSnm CMmWFSnm out
saveFITS out "./${cfCMtmpdir}/CMmWFSn_mxp.fits"
exitCLI
EOF


# Check orthonormality in DM space (output)
#
milk-all << EOF
linalg.sgemm .GPUdevice ${GPUdevice}
loadfits "${DMmask}" dmmask
loadfits "./${cfCMtmpdir}/CMmDMn.fits" CMmDMn
CMmDMnm=CMmDMn*dmmask
linalg.sgemm .transpA 1
linalg.sgemm CMmDMnm CMmDMnm out
saveFITS out "./${cfCMtmpdir}/CMmDMn_mxp.fits"
exitCLI
EOF

# Reconstruct WFS from DM (TEST)

milk-all << EOF
linalg.sgemm .GPUdevice ${GPUdevice}
loadfits "./${cfCMtmpdir}/CMmDMn.fits" CMmDMn
loadfits "${zrespm}" zespM
linalg.sgemm zespM CMmDMn out
saveFITS out "./${cfCMtmpdir}/CMmDMn_WFS.fits"
listim
exitCLI
EOF
fi









########################################################################
#
# CONTROL MODES x TARGET MODES XP
#
########################################################################


# WFS-space Gramm-Schmidt
#
# INPUT:
#   modesZFnWFSm
#
# OUTPUT:
#   modesZFnWFSmwfsgs
#
milk-all << EOF
loadfits "./${cfCMtmpdir}/modesZFnWFSm.fits" modesZFnWFSm
loadfits "./${cfCMtmpdir}/modesZFn.fits" modesZFn
linalg.GramSchmidt .GPUdevice 0
linalg.GramSchmidt .auxmat modesZFn
linalg.GramSchmidt modesZFnWFSm modesZFnWFSmgs
saveFITS modesZFn "./${cfCMtmpdir}/modesZFnwfsgs.fits"
saveFITS modesZFnWFSmgs "./${cfCMtmpdir}/modesZFnWFSmwfsgs.fits"
exitCLI
EOF



# Decompose modesZFnWFSmwfsgs.fits against CMmWFSn over wfsmask
# The result is stored in modesZFnWFSmwfsgs_CMmWFSnm_xp.fits.
# The decomposition is a SGEMM over wfsmask because CMmWFSn is orthonormal over wfsmask
#
# INPUT:
#   CMmWFSn              : input basis
#   modesZFnWFSmwfsgs    : target basis, WFS-space, post-GS
#
# OUTPUT:
#   modesZFnWFSm_CMmWFSnm_xp
#
milk-all << EOF
linalg.sgemm .GPUdevice ${GPUdevice}
loadfits "./${cfCMtmpdir}/CMmWFSn.fits" CMmWFSn
loadfits "${WFSmask}" wfsmask
CMmWFSnm=CMmWFSn*wfsmask
loadfits "./${cfCMtmpdir}/modesZFnWFSmwfsgs.fits" modesZFnWFSmwfsgs
linalg.sgemm .transpA 1
linalg.sgemm modesZFnWFSmwfsgs CMmWFSnm out
saveFITS out "./${cfCMtmpdir}/modesZFnWFSmwfsgs_CMmWFSnm_xp.fits"
exitCLI
EOF






# Compute the rotation that will turn 
# the cross-product into a lower(0,1)/upper(2) triangular matrix, ensuring
# a good match between the two sets of modes.
# The rotation is stored as matArot.fits
# We then apply the rotation to CMmDM and CMmWFS
#
#
# INPUT:
#   modesZFnWFSm_CMmWFSnm_xp
#
# OUTPUT:
#   matABr
#   matArot
#   CMmDMnr   : rotated (new) basis, DM space
#   CMmWFSnr  : rotated (new) basis, WFS space
#
milk-all << EOF
linalg.sgemm .GPUdevice ${GPUdevice}
loadfits "./${cfCMtmpdir}/modesZFnWFSmwfsgs_CMmWFSnm_xp.fits" matAB
linalg.basisrotmatch .optmode 0
linalg.basisrotmatch matAB matArot
# matABr.fits should now be lower triangular
saveFITS matAB "./${cfCMtmpdir}/matABr.fits"
saveFITS matArot "./${cfCMtmpdir}/matArot.fits"
#
# Apply rotation to CMmDMn
loadfits "./${cfCMtmpdir}/CMmDMn.fits" CMmDMn
linalg.sgemm .transpA 0
linalg.sgemm .transpB 0
linalg.sgemm CMmDMn matArot CMmDMnr
saveFITS CMmDMnr "./${cfCMtmpdir}/CMmDMnr.fits"
#
# Apply rotation to CMmWFSn
loadfits "./${cfCMtmpdir}/CMmWFSn.fits" CMmWFSn
linalg.sgemm .transpA 0
linalg.sgemm .transpB 0
linalg.sgemm CMmWFSn matArot CMmWFSnr
saveFITS CMmWFSnr "./${cfCMtmpdir}/CMmWFSnr.fits"
#
listim
exitCLI
EOF




if [ ${TESTMODE} = 1 ]; then
# CHECK

milk-all << EOF
linalg.sgemm .GPUdevice ${GPUdevice}
loadfits "${zrespm}" zrespM
loadfits "./${cfCMtmpdir}/modesZFnwfsgs.fits" modesZFnwfsgs
linalg.sgemm zrespM modesZFnwfsgs modesZFnwfsgs_WFS
listim
saveFITS modesZFnwfsgs_WFS "./${cfCMtmpdir}/modesZFnwfsgs_WFS.fits"
exitCLI
EOF

milk-all << EOF
linalg.sgemm .GPUdevice ${GPUdevice}
loadfits "${zrespm}" zrespM
loadfits "./${cfCMtmpdir}/CMmDMn.fits" CMmDMn
linalg.sgemm zrespM CMmDMn CMmDMn_WFS
listim
saveFITS CMmDMn_WFS "./${cfCMtmpdir}/CMmDMn_WFS.fits"
exitCLI
EOF

milk-all << EOF
linalg.sgemm .GPUdevice ${GPUdevice}
loadfits "${zrespm}" zrespM
loadfits "./${cfCMtmpdir}/CMmDMnr.fits" CMmDMnr
linalg.sgemm zrespM CMmDMnr CMmDMnr_WFS
listim
saveFITS CMmDMnr_WFS "./${cfCMtmpdir}/CMmDMnr_WFS.fits"
exitCLI
EOF


# Check orthonormality in DM space (output)
#
milk-all << EOF
linalg.sgemm .GPUdevice ${GPUdevice}
loadfits "./${cfCMtmpdir}/CMmWFSnr.fits" CMmWFSnr
loadfits "./${cfCMtmpdir}/modesZFnWFSm.fits" modesZFnWFSm
linalg.sgemm .transpA 1
linalg.sgemm CMmWFSnr modesZFnWFSm out
saveFITS out "./${cfCMtmpdir}/CMmDMn_mxp.fits"
exitCLI
EOF

fi




if [ ${TESTMODE} = 1 ]; then
# rotated basis now satisfies constraints
# check it is orthonormal

# OPTIONAL
#
# check new basis
# should be identity matrix
#
milk-all << EOF
linalg.sgemm .GPUdevice ${GPUdevice}
loadfits "${WFSmask}" wfsmask
loadfits "./${cfCMtmpdir}/CMmWFSnr.fits" CMmWFSnr
CMmWFSnrm=CMmWFSnr*wfsmask
linalg.sgemm .transpA 1
linalg.sgemm CMmWFSnrm CMmWFSnrm out
saveFITS out "./${cfCMtmpdir}/CMmWFSnr_mxp.fits"
exitCLI
EOF

# OPTIONAL
#
# should be approximately diagonal
# 
milk-all << EOF
linalg.sgemm .GPUdevice ${GPUdevice}
loadfits "${DMmask}" dmmask
loadfits "./${cfCMtmpdir}/CMmDMnr.fits" CMmDMnr
CMmDMnrm=CMmDMnr*dmmask
linalg.sgemm .transpA 1
linalg.sgemm CMmDMnrm CMmDMnrm out
saveFITS out "./${cfCMtmpdir}/CMmDMnr_mxp.fits"
exitCLI
EOF
fi





# DM-normalize output modes
# RMS within dmmask should be = 1
#
# INPUT:
#   CMmDMnr   : rotated (new) basis, DM space
#   CMmWFSnr  : rotated (new) basis, WFS space
#
# OUTPUT:
#   conf/CMmodesDM/CMmodesDM_sf.fits
#   conf/CMmodesWFS/CMmodesWFS_sf.fits
#
milk-all << EOF
loadfits "./${cfCMtmpdir}/CMmWFSnr.fits" CMmWFSnr
loadfits "./${cfCMtmpdir}/CMmDMnr.fits" CMmDMnr
loadfits "${DMmask}" dmmask
normalizeslice .RMS 1
normalizeslice .auxin CMmWFSnr
normalizeslice CMmDMnr dmmask CMmDMnrn 2
listim
saveFITS CMmDMnrn "conf/CMmodesDM/CMmodesDM_sf.fits"
saveFITS CMmWFSnr "conf/CMmodesWFS/CMmodesWFS_sf.fits"
listim
exitCLI
EOF




if [ ${TESTMODE} = 1 ]; then
# OPTIONAL
#
# Test that output CM DM modes are unity RMS over dmmask
# diagonal value = number pix in dmmask
# 
milk-all << EOF
linalg.sgemm .GPUdevice ${GPUdevice}
loadfits "conf/CMmodesDM/CMmodesDM_sf.fits" CMmodesDM_sf
loadfits "${DMmask}" dmmask
CMmodesDM_sfm=CMmodesDM_sf*dmmask
linalg.sgemm .transpA 1
linalg.sgemm CMmodesDM_sfm CMmodesDM_sfm out
saveFITS out "./${cfCMtmpdir}/CMmodesDM_sf_xp.fits"
exitCLI
EOF
fi





# Spatial extrapolation of DM modes
# use emodesDM, emodesDMe
#
# INPUT:
#   conf/CMmodesDM/CMmodesDM_sf.fits
#   conf/CMmodesWFS/CMmodesWFS_sf.fits
#
# OUTPUT:
#   conf/CMmodesDM/CMmodesDM_sfe.fits
#

milk-all << EOF
loadfits "conf/CMmodesDM/CMmodesDM_sf.fits" CMmodesDM_sf
loadfits "./${cfCMtmpdir}/emodesDM.fits" emodesDM
loadfits "./${cfCMtmpdir}/emodesDMe.fits" emodesDMe
linalg.sgemm .GPUdevice ${GPUdevice}
linalg.sgemm .transpA 1
linalg.sgemm emodesDM CMmodesDM_sf mcoeff
saveFITS mcoeff "./${cfCMtmpdir}/mcoeff.fits"
linalg.sgemm .transpA 0
linalg.sgemm .transpB 0
linalg.sgemm emodesDMe mcoeff CMmodesDM_sfme
saveFITS CMmodesDM_sfme "conf/CMmodesDM/CMmodesDM_sfme.fits"
linalg.sgemm modesZFnmU mcoeff CMmodesDM_sfmem
saveFITS CMmodesDM_sfmem "conf/CMmodesDM/CMmodesDM_sfmem.fits"
imres=CMmodesDM_sfme-CMmodesDM_sf
saveFITS imres "./${cfCMtmpdir}/imrese.fits"
loadfits "${DMmask}" dmmask
imouto=CMmodesDM_sfme*(1.0-dmmask)
listim
saveFITS imouto "./${cfCMtmpdir}/imouto.fits"
listim
exitCLI
EOF

milk-all << EOF
loadfits "conf/CMmodesDM/CMmodesDM_sf.fits" CMmodesDM_sf
loadfits "./${cfCMtmpdir}/imouto.fits" imouto
imout=CMmodesDM_sf+imouto
saveFITS imout "conf/CMmodesDM/CMmodesDM_sfe.fits"
exitCLI
EOF


errexit=0


if [ $errexit = 1 ]; then
	exit 1
fi


cacaomsglog "END"
