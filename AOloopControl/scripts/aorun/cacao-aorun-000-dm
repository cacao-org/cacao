#!/usr/bin/env bash

# This script uses milk-argparse
# See template milk-scriptexample in module milk_module_example for template and instructions

# script 1-line description
MSdescr="AO loop execution script"
# Extended description
MSextdescr="AO loop script"
source milk-script-std-config
source cacao-check-cacaovars

MSarg+=( "action:string:action (start/stop/check)" )
source milk-argparse
ACTION="${inputMSargARRAY[0]}"


ACTIONOK=0



if [ ${ACTION} == "check" ]; then
ACTIONOK=1
fi

# Checking FPS
FPScheckOK="OK"
checkFPSON CACAO_FPSPROC_DMCH2DISP ${CACAO_FPSPROC_DMCH2DISP}
echo "FPScheckOK = ${FPScheckOK}"

if [ ${FPScheckOK} == "FAIL" ]; then
echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] FPS check failed"
exit
fi

pOK=$(ps -alx| grep DMch2disp-${CACAO_DMINDEX} | grep RUNSTART | wc -l)
if [ $pOK -gt 0 ]; do
echo "Process DMch2disp-${CACAO_DMINDEX} is already running"
else
echo "Process DMch2disp-${CACAO_DMINDEX} not currently running"
fi


if [ ${ACTION} == "start" ]; then
ACTIONOK=1
# ======================================================================
# Starting DM combination process
# ======================================================================

sendFPScmd "setval DMch2disp-${CACAO_DMINDEX}.option.voltmode OFF"
sendFPScmd "setval DMch2disp-${CACAO_DMINDEX}.option.DClevel 0.0"
#taskset_DMch2disp="3"
#sendFPScmd "setval DMch2disp-${CACAO_DMINDEX}.procinfo.taskset ${taskset_DMch2disp}"
sendFPScmd "confwupdate DMch2disp-${CACAO_DMINDEX}"
sendFPScmd "runstart DMch2disp-${CACAO_DMINDEX}"

# WAIT for dm${CACAO_DMINDEX}disp to appear
filename="${MILK_SHM_DIR}/dm${CACAO_DMINDEX}disp.im.shm"
echo "Waiting for file ${filename} ..."
until [ -f "$filename" ]
do
     sleep 0.1
done
milk-shmim-zero aol${CACAO_LOOPNUMBER}_dmC

fi


if [ ${ACTION} == "stop" ]; then
ACTIONOK=1
sendFPScmd "runstop DMch2disp-${CACAO_DMINDEX}"
fi




if [ ${ACTIONOK} == 0 ]; then
echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] ACTION $ACTION undefined"
fi
